swagger: "2.0"
info:
  version: "1.0.0"
  title: "Playlist Manager"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
# host: "playlistmanager.swagger.io"
# basePath: "/v1"
tags:
- name: "playlist"
  description: "\t Information about your Playlist"
- name: "user"
  description: "\t Operations about user"
- name: "find"
  description: "\t Search methods"
schemes:
- "https"
- "http"
paths:
  /playlist:
    post:
      tags:
      - "playlist"
      summary: "Add a new playlist to the store"
      description: ""
      operationId: "addPlaylist"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Playlist"
      responses:
        405:
          description: "Invalid input"
      security:
      - playlist_auth:
        - "write:playlist"
        - "read:playlist"
    put:
      tags:
      - "playlist"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePlaylist"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Playlist that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Playlist"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Playlist not found"
        405:
          description: "Validation exception"
      security:
      - playlist_auth:
        - "write:playlist"
        - "read:playlist"
  /playlist/findByStatus:
    get:
      tags:
      - "find"
      summary: "Finds Playlists by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPlaylistsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "invalid"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Playlist"
        400:
          description: "Invalid status value"
      security:
      - playlist_auth:
        - "write:playlist"
        - "read:playlist"
  /playlist/findByGenres:
    get:
      tags:
      - "find"
      summary: "Finds Playlists by genres"
      description: "Muliple tags can be provided with comma separated strings. Use         genre1, genre2, genre33 for testing."
      operationId: "findPlaylistsByGenres"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "genre"
        in: "query"
        description: "Genres to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Playlist"
        400:
          description: "Invalid genre"
      security:
      - playlist_auth:
        - "write:playlist"
        - "read:playlist"
  /playlist/{playlistId}:
    get:
      tags:
      - "find"
      summary: "Finds Playlists by ID"
      description: "Returns a single playlist"
      operationId: "getPlaylistById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Playlist"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    post:
      tags:
      - "find"
      summary: "Updates a Playlist in the store"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "playlistId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - playlist_auth:
        - "write:playlist"
        - "read:playlist"
    delete:
      tags:
      - "find"
      summary: "Deletes a Playlist"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "playlistId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - playlist_auth:
        - "write:playlist"
        - "read:playlist"
  /playlist/song:
    post:
      tags:
      - "playlist"
      summary: "Add a new song to the playlist"
      description: ""
      operationId: "addSong"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Song"
      responses:
        405:
          description: "Invalid input"
      security:
      - playlist_auth:
        - "write:playlist"
        - "read:playlist"
    put:
      tags:
      - "playlist"
      summary: "Update an existing pet"
      description: ""
      operationId: "updateSong"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Playlist"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - playlist_auth:
        - "write:playlist"
        - "read:playlist"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "Enter the user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "Enter the password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that needs to be found. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  playlist_auth:
    type: "oauth2"
    authorizationUrl: "http://playlistmanager.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:playlist: "modify playlists in your account"
      read:playlist: "read your playlists"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Song:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      playlistid:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Calvin Harris - Summer"
      length:
        type: "string"
        example: "4:15"
    xml:
      name: "Song"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      userStatus:
        type: "string"
        description: "User Status"
        enum:
        - "active"
        - "unactive"
    xml:
      name: "User"
  Genre:
    type: "object"
    properties:
      name:
        type: "string"
    xml:
      name: "Genre"
  Playlist:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      content:
        type: "array"
        xml: 
          name: "songs"
          wrapped: true
        items:  
          $ref: "#/definitions/Song"
      name:
        type: "string"
        example: "House music collection"
      genres:
        type: "array"
        xml:
          name: "genre"
          wrapped: true
        items:
          $ref: "#/definitions/Genre"
      access:
        type: "string"
        description: "access type"
        enum:
        - "public"
        - "private"
    xml:
      name: "Playlist"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /Gioman/Playlist/1.0.0